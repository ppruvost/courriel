// send-mail.js
// Node.js + Nodemailer + OAuth2 pour Gmail
// Fonctionne directement avec les secrets GitHub :
// GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, GOOGLE_REFRESH_TOKEN, GOOGLE_SENDER_EMAIL, TO_EMAIL (optionnel)

import nodemailer from 'nodemailer';
import { google } from 'googleapis';

const CLIENT_ID = process.env.GOOGLE_CLIENT_ID;
const CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;
const REFRESH_TOKEN = process.env.GOOGLE_REFRESH_TOKEN;
const SENDER_EMAIL = process.env.GOOGLE_SENDER_EMAIL;
const TO_EMAIL = process.env.TO_EMAIL || SENDER_EMAIL; // fallback si TO_EMAIL non d√©fini

// V√©rification des variables d'environnement
if (!CLIENT_ID || !CLIENT_SECRET || !REFRESH_TOKEN || !SENDER_EMAIL) {
  console.error('‚ùå Missing environment variables. Please set GitHub Secrets.');
  process.exit(1);
}

// Cr√©ation du client OAuth2
const oAuth2Client = new google.auth.OAuth2(
  CLIENT_ID,
  CLIENT_SECRET,
  'https://developers.google.com/oauthplayground' // redirect URI (non utilis√©e ici)
);
oAuth2Client.setCredentials({ refresh_token: REFRESH_TOKEN });

async function sendMail() {
  try {
    // R√©cup√©ration du access token
    const accessTokenResponse = await oAuth2Client.getAccessToken();
    const accessToken = accessTokenResponse?.token;

    if (!accessToken) {
      throw new Error('Impossible de r√©cup√©rer l‚Äôaccess token.');
    }

    // Cr√©ation du transporteur Nodemailer
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        type: 'OAuth2',
        user: SENDER_EMAIL,
        clientId: CLIENT_ID,
        clientSecret: CLIENT_SECRET,
        refreshToken: REFRESH_TOKEN,
        accessToken: accessToken
      }
    });

    // D√©finition du mail
    const mailOptions = {
      from: SENDER_EMAIL,
      to: TO_EMAIL,
      subject: 'üìß Test email depuis GitHub Actions',
      text: 'Bonjour ‚Äî ceci est un test envoy√© via Nodemailer + OAuth2 depuis GitHub Actions.',
    };

    // Envoi du mail
    const result = await transporter.sendMail(mailOptions);
    console.log('‚úÖ Email envoy√© avec succ√®s ! MessageId:', result.messageId);
  } catch (err) {
    console.error('‚ùå Erreur lors de l‚Äôenvoi du mail :', err);
    process.exit(1); // GitHub Actions consid√©rera le job comme √©chou√©
  }
}

// Lancement de l‚Äôenvoi
sendMail();
